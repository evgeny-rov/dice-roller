  initBounds() {
    const groundBody = new CANNON.Body({ mass: 0, shape: new CANNON.Plane() });
    const topBoundsBody = new CANNON.Body({
      mass: 0,
      shape: new CANNON.Plane(),
      position: new CANNON.Vec3(0, 20, 0),
      quaternion: new CANNON.Quaternion(0.4999, 0, 0, 0.8660),
    });

    const rightBoundsBody = new CANNON.Body({
      mass: 0,
      shape: new CANNON.Plane(),
      position: new CANNON.Vec3(20, 0, 0),
      quaternion: new CANNON.Quaternion(0, -0.4999, 0, 0.8660),
    });

    const leftBoundsBody = new CANNON.Body({
      mass: 0,
      shape: new CANNON.Plane(),
      position: new CANNON.Vec3(-20, 0, 0),
      quaternion: new CANNON.Quaternion(0, 0.4999, 0, 0.8660),
    });

    this.world.addBody(groundBody);
    this.world.addBody(topBoundsBody);
    this.world.addBody(rightBoundsBody);
    this.world.addBody(leftBoundsBody);
  }



initLights() {
    const mainLight = new THREE.SpotLight(0xFFFFFF, 1);
    mainLight.position.set(0, -30, 70);
    mainLight.angle = Math.PI / 8;
    mainLight.penumbra = 1;
    mainLight.decay = 2;
    mainLight.distance = 150;

    mainLight.castShadow = true;
    mainLight.shadow.mapSize.width = 1024;
    mainLight.shadow.mapSize.height = 1024;
    mainLight.shadow.camera.near = 10;
    mainLight.shadow.camera.far = 200;

    const spotLightHelper = new THREE.SpotLightHelper(mainLight)
    this.scene.add( spotLightHelper );

    this.scene.add(mainLight);
  }

          //diceBody.shapeOrientations[0].set(0, 0, 0, 0)
        // new CANNON.Box(new CANNON.Vec3(1.5, 1.5, 1.5))
        // new CANNON.Vec3(Math.random() * 10, Math.random() * 10, 10),
        // diceBody.shapeOrientations[0].set(0.28, 0, 0, 0.95)

        const d6Model = this.customModels[0];
    const currentAmount = this.objectsList.length;
    if (amount === currentAmount) {
      // reset
    } else if (amount > currentAmount) {
      for (let i = currentAmount; i < amount; i++) {
        console.log('added')
        const diceModel = d6Model.clone();
        console.log(diceModel)
        const diceBody = new CANNON.Body({
          mass: 1,
          position: new CANNON.Vec3(Math.random() * 10 , Math.random() * 10 - 50, 35 + Math.random() * 10),
          velocity: new CANNON.Vec3(0, 25 + Math.random() * 10, 0),
          angularVelocity: new CANNON.Vec3(-10, -10, -10),
          shape: new CANNON.ConvexPolyhedron(icosahedron.vertices, icosahedron.faces),
        });
        //diceBody.shapeOrientations[0].set(0, 0, 0, 0)
        // new CANNON.Box(new CANNON.Vec3(1.5, 1.5, 1.5))
        // new CANNON.Vec3(Math.random() * 10, Math.random() * 10, 10),
        // diceBody.shapeOrientations[0].set(0.28, 0, 0, 0.95)

        this.world.addBody(diceBody);
        this.scene.add(diceModel);
        this.objectsList.push({ physicsBody: diceBody, renderBody: diceModel });
      }
    } else if (amount < currentAmount) {
      for (let i = currentAmount; i > amount; i--) {
        console.log('removed')
        const dice = this.objectsList.pop();
        dice && this.world.remove(dice.physicsBody);
        dice && this.scene.remove(dice.renderBody);
      }
    }
    //this.render()

              //child.geometry.center();


              <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Three Js App</title>
</head>
<body>
  <div id="container" style="visibility: hidden;">
    <div id="controls-wrapper">
      <button class="btn btn-main">ROLL</button>
      <span class="select left active">D6</span>
      <label class="switch">
        <input type="checkbox" id="slider" autocomplete="off">
        <span class="slider"></span>
      </label>
      <span class="select right">D20</span>
      <button class="btn btn-set-dec">-</button>
      <span id="roll-amount">1</span>
      <button class="btn btn-set-inc">+</button>
    </div>
  </div>
</body>
</html>

body {
  margin: 0; 
  font-family: "Gill Sans", sans-serif;
}

#container {
  width: 100%;
  height: 100vh;
}

canvas {
  display: block;
  z-index: -1; 
}

#controls-wrapper {
  position: fixed;
  z-index: 1;
  opacity: 0.8;
  display: grid;
  min-width: 200px;
  width: 30%;
  height: 15%;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  margin-left: auto;
  margin-right: auto;
  left: 0;
  right: 0;
  bottom: 15%;
  justify-content: center;
  align-items: center;
  row-gap: 1.5em;
}

span {
  justify-self: center;
  font-size: 1.5em;
  color: white;
  padding: 0;
  margin: 0;
}

span.active {
  color: rgb(69, 197, 133);
}

span.left {
  grid-column: 1 / 1;
  grid-row: 2 / 2;
}

span.right {
  grid-column: 3 / 3;
  grid-row: 2 / 2;
}

.btn {
  border: none;
  border-radius: 50%;
  height: 40px;
  width: 40px;
  justify-self: center;
  font-size: 0.9;
}

.btn-set-inc {
  grid-column: 3 / 3;
  grid-row: 3 / 3;
}

.btn-set-dec {
  grid-column: 1 / 1;
  grid-row: 3 / 3;
}

.btn-main {
  grid-column: 1 / 4;
  grid-row: 1 / 1;
  border-radius: 30px;
  width: 40%;
  height: 50px;
  outline: 0;
}

.btn:active {
  opacity: 0.5;
}

#roll-amount {
  grid-column: 2 / 2;
  grid-row: 3 / 3;
}

.switch {
  position: relative;
  display: inline-block;
  grid-column: 2 / 2;
  grid-row: 2 / 2;
  justify-self: center;
  width: 60px;
  height: 34px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 4px double white;
  border-radius: 5px;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}